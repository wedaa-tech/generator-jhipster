# <%= baseName %> prototype

This is a <%= applicationTypeGateway ? "gateway" : "microservice" %> prototype generated using WeDAA, you can find documentation and help at [WeDAA Docs](https://www.wedaa.tech/docs/introduction/what-is-wedaa/)

## Prerequisites

- jdk version >= 17
<%_ if (authenticationTypeOauth2 && serviceDiscoveryEureka) { _%>
- For Keycloak to work with Service Discovery in local(docker) environment, following line must be added to your hosts file `/etc/hosts`
  ```
  127.0.0.1	keycloak
  ```
<%_ } _%>

## Project Structure

```
├── src/
    ├── main/
        ├── docker (contains docker compose files for external components based on architecture design)
        ├── java/<%= baseName %>/
        └──  resources  (configuration properties)
    └── test/ (testcases for prototype)
        ├── java/<%= baseName %>/
        └──  resources
├── target/
├── checkstyle.xml
├── comm.yo-rc.json (generator configuration file for communications)
<%_ if (communicationsList && communicationsList.length > 0) { _%>
├── COMMUNICATION.md (Communication documentation)
<%_ } _%>
├── mvnw
├── mvnw.cmd
├── package.json
├── pom.xml
├── README.md (Project documentation)
└── sonar-project.properties
```

<%_ if (authenticationTypeOauth2 || serviceDiscoveryEureka || prodDatabaseType !== "no" || communicationsList.includes("rabbitmq")) { _%>
## Dependencies

This application is configured to work with external component(s).

Docker compose files are provided for the same to get started quickly.

Component details:
<%_ if (authenticationTypeOauth2) { _%>
- Keycloak as Identity Management: `npm run docker:keycloak:up`
<%_ } _%>
<%_ if (serviceDiscoveryEureka) { _%>
- Eureka Service Discovery: `npm run docker:jhipster-registry:up`
<%_ } _%>
<%_ if (prodDatabaseType !== "no") { _%>
- Database: `npm run docker:db:up`
<%_ } _%>
<%_ if ( communicationsList.includes("rabbitmq")) { _%>
- RabbitMQ message broker: `npm run docker:rabbitmq:up`
<%_ } _%>

On launch, <%= baseName %> will refuse to start if it is not able to connect to any of the above component(s).
<%_ } _%>

## Get Started

The below cmd will install the required dependencies and run the prototype in local machine.

Run the prototype locally: `./mvnw`

Open [http://localhost:<%= serverPort %>/management/health/readiness](http://localhost:<%= serverPort %>/management/health/readiness) to view it in your browser.

You could see the below response in your browser:
```
{
  "status": "UP"
}
``` 

## Containerization

Docker image will be built with the prototype name.

- Build the docker image: `npm run java:docker`

Start the container: `docker run -d -p <%= serverPort %>:<%= serverPort %> <%= baseName %>:latest`
