<%#
 Copyright 2013-2023 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
apiVersion: <%= KUBERNETES_DEPLOYMENT_API_VERSION %>
kind: Deployment
metadata:
  name: <%= app.baseName.toLowerCase() %>
  namespace: <%= kubernetesNamespace %>
spec:
  replicas: 1
  selector:
    matchLabels:
    <%_ if (externalLB) { _%>
      lbtype: external
    <%_ } else { _%>
      app: <%= app.baseName.toLowerCase() %>
    <%_ } _%>
      version: "v1"
  template:
    metadata:
      labels:
      <%_ if (externalLB) { _%>
        lbtype: external
      <%_ } _%>
        app: <%= app.baseName.toLowerCase() %>
        version: "v1"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - <%= app.baseName.toLowerCase() %>
                topologyKey: kubernetes.io/hostname
              weight: 100
<%_ if (app.clientFramework === 'no') { _%>
      initContainers:
        - name: init-ds
          image: busybox:latest
          command:
            - '/bin/sh'
            - '-c'
            - |
                while true
                do
<%_ if (app.prodDatabaseTypeMysql) { _%>
                  rt=$(nc -z -w 1 <%= app.baseName.toLowerCase() %>-mysql 3306)
<%_ } _%>
<%_ if (app.prodDatabaseTypeMariadb) { _%>
                  rt=$(nc -z -w 1 <%= app.baseName.toLowerCase() %>-mariadb 3306)
<%_ } _%>
<%_ if (app.prodDatabaseTypePostgres) { _%>
                  rt=$(nc -z -w 1 <%= app.baseName.toLowerCase() %>-postgresql <%= app.databasePort != null ? app.databasePort : 5432 %>)
<%_ } _%>
<%_ if (app.databaseTypeMongodb) { _%>
                  rt=$(nc -z -w 1 <%= app.baseName.toLowerCase() %>-mongodb <%= app.databasePort != null ? app.databasePort : 27017 %>)
<%_ } _%>
<%_ if (app.databaseTypeCouchbase) { _%>
                  rt=$(nc -z -w 1 <%= app.baseName.toLowerCase() %>-couchbase-cluster-srv 8091)
<%_ } _%>
<%_ if (app.databaseTypeNeo4j) { _%>
                  rt=$(nc -z -w 1 <%= app.baseName.toLowerCase() %>-neo4j 7474)
<%_ } _%>
                  if [ $? -eq 0 ]; then
                    echo "DB is UP"
                    break
                  fi
                  echo "DB is not yet reachable;sleep for 10s before retry"
                  sleep 10
                done
<%_ } _%>        
      containers:
      - name: <%= app.baseName.toLowerCase() %>-app
        image: <%= app.targetImageName %>
<%_ if (app.clientFramework === 'no') { _%>
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: prod,api-docs
        - name: JHIPSTER_CORS_ALLOWED_ORIGINS
          value: '<%= appConfigs.map(config => "http://" + config.baseName + "." + kubernetesNamespace + "." + ingressDomain).join(",") %>'
        - name: OIDC_URL
          value: http://keycloak.<%= kubernetesNamespace %>.<%= ingressDomain %>/realms/jhipster
      <% appConfigs.forEach(function(appConfig) { %>
        <% const serverValue = appConfig.baseName.toLowerCase(); %>
          <% const commConfig = commConfigs[app.baseName.toLowerCase()]; %>
            <% const isServerValueInCommConfig = commConfig.some(function(config) { return config.server === serverValue; }); %>
              <% if (isServerValueInCommConfig && app.baseName.toLowerCase() !== appConfig.baseName.toLowerCase()) { %>
        - name: COMMUNICATION_<%= appConfig.baseName.toUpperCase() %>
          value: <%= "http://" + appConfig.baseName.toLowerCase() + "." + kubernetesNamespace + ".svc.cluster.local:" + appConfig.serverPort %>
        <% } %>
      <% }); %>
    <%_ if (app.reactive && !app.serviceDiscoveryEureka) { _%>
      <%
        let incrementalIndex = 0; // Initialize the incremental index outside the loop 
      %>
      <% appConfigs.forEach(function(appConfig) { %>
        <% const serverValue = appConfig.baseName.toLowerCase(); %>
          <% const commConfig = commConfigs[app.baseName.toLowerCase()]; %>
            <% const isServerValueInCommConfig = commConfig.some(function(config) { return config.server === serverValue; }); %>
              <% if (isServerValueInCommConfig && app.baseName.toLowerCase() !== appConfig.baseName.toLowerCase()) { %>
        - name: SPRING_CLOUD_GATEWAY_ROUTES_<%= incrementalIndex %>_ID
          value: <%= appConfig.baseName.toLowerCase() %>
        - name: SPRING_CLOUD_GATEWAY_ROUTES_<%= incrementalIndex %>_URI
          value: <%= "http://" + appConfig.baseName.toLowerCase() + "." + kubernetesNamespace + ".svc.cluster.local:" + appConfig.serverPort + "/"%>
        - name: SPRING_CLOUD_GATEWAY_ROUTES_<%= incrementalIndex %>_PREDICATES_0_NAME
          value: "Path"
        - name: SPRING_CLOUD_GATEWAY_ROUTES_<%= incrementalIndex %>_PREDICATES_0_ARGS_PATTERN
          value: "/services/<%= appConfig.baseName.toLowerCase() %>/**"
        - name: SPRING_CLOUD_GATEWAY_ROUTES_<%= incrementalIndex %>_FILTERS_0_NAME
          value: "RewritePath"
        - name: SPRING_CLOUD_GATEWAY_ROUTES_<%= incrementalIndex %>_FILTERS_0_ARGS_REGEXP
          value: "/services/<%= appConfig.baseName.toLowerCase() %>/(?<remaining>.*)"
        - name: SPRING_CLOUD_GATEWAY_ROUTES_<%= incrementalIndex %>_FILTERS_0_ARGS_REPLACEMENT
          value: "/${remaining}"
        <% incrementalIndex++; %>
          <% } %>
      <% }); %>
    <%_ } _%>
      <%_ if (minikube) { _%>
        - name: MINIKUBE_IP
          valueFrom:
            configMapKeyRef:
              name: minikube-cm
              key: minikube-ip
      <%_ } _%>
<%_ if (app.serviceDiscoveryEureka) { _%>
        - name: SPRING_CLOUD_CONFIG_URI
          value: http://admin:${jhipster.registry.password}@jhipster-registry.<%= kubernetesNamespace %>.svc.cluster.local:8761/config
        - name: JHIPSTER_REGISTRY_PASSWORD
          valueFrom:
            secretKeyRef:
              name: registry-secret
              key: registry-admin-password
        - name: EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE
          value: http://admin:${jhipster.registry.password}@jhipster-registry.<%= kubernetesNamespace %>.svc.cluster.local:8761/eureka/
  <%_ if (istio) { _%>
        - name: EUREKA_INSTANCE_PREFER_IP_ADDRESS
          value: "false"
        - name: EUREKA_INSTANCE_HOSTNAME
          value: <%= app.baseName.toLowerCase() %>
  <%_ } _%>
<%_ } _%>
<%_ if (app.serviceDiscoveryConsul) { _%>
        - name: SPRING_CLOUD_CONSUL_HOST
          value: consul-headless.<%= kubernetesNamespace %>.svc.cluster.local
        - name: SPRING_CLOUD_CONSUL_PORT
          value: "8500"
  <%_ if (istio) { _%>
        - name: SPRING_CLOUD_CONSUL_DISCOVERY_PREFER_IP_ADDRESS
          value: "false"
        - name: SPRING_CLOUD_CONSUL_DISCOVERY_HOSTNAME
          value: <%= app.baseName.toLowerCase() %>
        - name: SPRING_CLOUD_CONSUL_DISCOVERY_SERVICE_NAME
          value: <%= app.baseName.toLowerCase() %>
  <%_ } _%>
<%_ } _%>
<%_ if (!app.serviceDiscoveryAny && app.authenticationTypeJwt) { _%>
        - name: JHIPSTER_SECURITY_AUTHENTICATION_JWT_BASE64_SECRET
          valueFrom:
            secretKeyRef:
              name: jwt-secret
              key: secret
<%_ } _%>
<%_ if (app.prodDatabaseTypeMysql || app.prodDatabaseTypeMariadb) { _%>
        - name: SPRING_DATASOURCE_URL
          value: <%- this.getJDBCUrl(app.prodDatabaseType, { hostname: `${app.baseName.toLowerCase()}-${app.prodDatabaseType}.${kubernetesNamespace}.svc.cluster.local`, databaseName: app.baseName.toLowerCase(), databasePort: app.databasePort }) %>
        - name: SPRING_LIQUIBASE_URL
          value: <%- this.getJDBCUrl(app.prodDatabaseType, { hostname: `${app.baseName.toLowerCase()}-${app.prodDatabaseType}.${kubernetesNamespace}.svc.cluster.local`, databaseName: app.baseName.toLowerCase(), databasePort: app.databasePort }) %>
  <%_ if (app.reactive) { _%>
        - name: SPRING_R2DBC_URL
          value: <%- this.getR2DBCUrl(app.prodDatabaseType, { hostname: `${app.baseName.toLowerCase()}-${app.prodDatabaseType}.${kubernetesNamespace}.svc.cluster.local`, databaseName: app.baseName.toLowerCase(), databasePort: app.databasePort }) %>
  <%_ } _%>
<%_ } _%>
<%_ if (app.prodDatabaseTypeMariadb) { _%>
  <%_ if (app.reactive) { _%>
        - name: SPRING_R2DBC_PASSWORD
  <%_ } else { _%>
        - name: SPRING_DATASOURCE_PASSWORD
  <%_ } _%>
          valueFrom:
            secretKeyRef:
              name: <%= app.baseName.toLowerCase() %>-mariadb
              key: mariadb-root-password
<%_ } _%>
<%_ if (app.prodDatabaseTypePostgres) { _%>
        - name: SPRING_DATASOURCE_URL
          value: <%- this.getJDBCUrl(app.prodDatabaseType, { hostname: `${app.baseName.toLowerCase()}-${app.prodDatabaseType}.${kubernetesNamespace}.svc.cluster.local`, databaseName: app.baseName, databasePort: app.databasePort }) %>
        - name: SPRING_DATASOURCE_USERNAME
          value: <%= app.baseName %>
  <%_ if (app.reactive) { _%>
        - name: SPRING_R2DBC_PASSWORD
  <%_ } else { _%>
        - name: SPRING_DATASOURCE_PASSWORD
  <%_ } _%>
          valueFrom:
            secretKeyRef:
              name: <%= app.baseName.toLowerCase() %>-postgresql
              key: postgresql-password
        - name: SPRING_LIQUIBASE_URL
          value: <%- this.getJDBCUrl(app.prodDatabaseType, { hostname: `${app.baseName.toLowerCase()}-${app.prodDatabaseType}.${kubernetesNamespace}.svc.cluster.local`, databaseName: app.baseName.toLowerCase(), databasePort: app.databasePort }) %>
  <%_ if (app.reactive) { _%>
        - name: SPRING_R2DBC_URL
          value: <%- this.getR2DBCUrl(app.prodDatabaseType, { hostname: `${app.baseName.toLowerCase()}-${app.prodDatabaseType}.${kubernetesNamespace}.svc.cluster.local`, databaseName: app.baseName.toLowerCase(), databasePort: app.databasePort }) %>
  <%_ } _%>
<%_ } _%>
<%_ if (app.databaseTypeMongodb) { _%>
        - name: SPRING_DATA_MONGODB_DATABASE
          value: <%= app.baseName %>
        - name: SPRING_DATA_MONGODB_URI
          value: "mongodb://<% for (let i = 0; i < app.dbPeerCount; i++) { %><%= app.baseName.toLowerCase() %>-mongodb-<%= i %>.<%= app.baseName.toLowerCase() %>-mongodb.<%= kubernetesNamespace %>:<%= app.databasePort != null ? app.databasePort : 27017 %><% if (app.reactive) { %>/?waitQueueMultiple=1000<% } %><% if (i < (app.dbPeerCount-1)) { %>,<% }} %>"
<%_ } _%>
<%_ if (app.databaseTypeNeo4j) { _%>
        - name: SPRING_NEO4J_URI
          value: bolt://<%= app.baseName.toLowerCase() %>-neo4j.<%= kubernetesNamespace %>.svc.cluster.local:7687
<%_ } _%>
<%_ if (app.databaseTypeCouchbase) { _%>
        - name: SPRING_COUCHBASE_CONNECTION_STRING
          value: "<%= app.baseName.toLowerCase() %>-couchbase-cluster-srv"
        - name: JHIPSTER_DATABASE_COUCHBASE_BUCKET_NAME
          value: <%= app.baseName.toLowerCase() %>
        - name: SPRING_COUCHBASE_BUCKET_PASSWORD
          valueFrom:
            secretKeyRef:
              name: couchbase-secret
              key: password
<%_ } _%>
<%_ if (app.searchEngineElasticsearch) { _%>
        - name: SPRING_ELASTICSEARCH_REST_URIS
          value: http://<%= app.baseName.toLowerCase() %>-elasticsearch.<%= kubernetesNamespace %>.svc.cluster.local:9200
<%_ } _%>
<%_ if (app.messageBrokerKafka) { _%>
        - name: KAFKA_CONSUMER_KEY_DESERIALIZER
          value: 'org.apache.kafka.common.serialization.StringDeserializer'
        - name: KAFKA_CONSUMER_VALUE_DESERIALIZER
          value: 'org.apache.kafka.common.serialization.StringDeserializer'
        - name: KAFKA_CONSUMER_BOOTSTRAP_SERVERS
          value: 'jhipster-kafka.<%= kubernetesNamespace %>.svc.cluster.local:9092'
        - name: KAFKA_CONSUMER_GROUP_ID
          value: '<%= app.baseName.toLowerCase() %>'
        - name: KAFKA_CONSUMER_AUTO_OFFSET_RESET
          value: 'earliest'
        - name: KAFKA_PRODUCER_BOOTSTRAP_SERVERS
          value: 'jhipster-kafka.<%= kubernetesNamespace %>.svc.cluster.local:9092'
        - name: KAFKA_PRODUCER_KEY_DESERIALIZER
          value: 'org.apache.kafka.common.serialization.StringDeserializer'
        - name: KAFKA_PRODUCER_VALUE_DESERIALIZER
          value: 'org.apache.kafka.common.serialization.StringDeserializer'
<%_ } _%>
<%_ if (app.messageBrokerRabbitMQ || app.communicationsFrameworkRabbitMQ) { _%>
        - name: SPRING_RABBITMQ_HOST
          value: jhipster-rabbitmq.<%= kubernetesNamespace %>.svc.cluster.local
        - name: SPRING_RABBITMQ_PORT
          value: "5672"
<%_ } _%>
<%_ if (monitoringPrometheus) { _%>
        - name: MANAGEMENT_PROMETHEUS_METRICS_EXPORT_ENABLED
          value: 'true'
<%_ } _%>
<%_ if (deploymentApplicationTypeMicroservice) { _%>
        - name: MANAGEMENT_TRACING_BAGGAGE_REMOTE_FIELDS
          value: "x-request-id,x-ot-span-context"
<%_ } _%>
    <%_ if (externalLB) { _%>
        - name: EXTERNAL_LB
          valueFrom:
            configMapKeyRef:
              name: external-lb
              key: external-lb
        - name: SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_OIDC_ISSUER_URI      
          value: http://$(EXTERNAL_LB):8080/realms/jhipster
      <%_ if (app.applicationTypeGateway || app.applicationTypeMonolith) { _%>
        - name: SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OIDC_CLIENT_ID
          value: web_app
        - name: SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OIDC_CLIENT_SECRET
          value: web_app
      <%_ } _%>
      <%_ if (app.applicationTypeMicroservice) { _%>
        - name: SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OIDC_CLIENT_ID
          value: internal
        - name: SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OIDC_CLIENT_SECRET
          value: internal
      <%_ } _%>
    <%_ } _%>
<%_ if (useKeycloak) { _%>  
        # Custom trustStore required when using Let's Encrypt staging
        - name: JAVA_OPTS
          value: " -Xmx256m -Xms256m"
        - name: SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_OIDC_ISSUER_URI 
      <%_ if (!minikube) { _%>        
          value: http://keycloak.<%= kubernetesNamespace %>.<%= ingressDomain %>/realms/jhipster
      <%_ } _%>
      <%_ if (minikube) { _%>        
          value: http://$(MINIKUBE_IP):30001/realms/jhipster
      <%_ } _%>
      <%_ if (app.applicationTypeGateway || app.applicationTypeMonolith) { _%>
        - name: SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OIDC_CLIENT_ID
          value: web_app
        - name: SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OIDC_CLIENT_SECRET
          value: web_app
      <%_ } _%>
      <%_ if (app.applicationTypeMicroservice) { _%>
        - name: SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OIDC_CLIENT_ID
          value: internal
        - name: SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OIDC_CLIENT_SECRET
          value: internal
      <%_ } _%>
<%_ } else { _%>
        - name: JAVA_OPTS
          value: " -Xmx256m -Xms256m"
<%_ } _%>
        - name: SERVER_SHUTDOWN
          value: graceful
    <%_ if (useKeycloak) { _%>
        # Custom trustStore required when using Let's Encrypt staging
        # volumeMounts:
        #  - name: java-truststore
        #    mountPath: /etc/pki/java
    <%_ } _%>
        ## GO ##
      <%_ if (app.prodDatabaseTypePostgres) { _%>
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: <%= app.baseName.toLowerCase() %>-postgresql
              key: postgresql-password
        - name: DB_URL
          value: postgresql://<%= app.baseName.toLowerCase() %>:$(DB_PASSWORD)@<%= app.baseName.toLowerCase() %>-postgresql.<%= kubernetesNamespace %>.svc.cluster.local:<%= app.databasePort != null ? app.databasePort : 5432 %>/<%= app.baseName.toLowerCase() %>
          <%_ } _%>
        - name: KEYCLOAK_URL
        <%_ if (!minikube) { _%>
          value: http://keycloak.<%= kubernetesNamespace %>.<%= ingressDomain %>/realms/jhipster
        <%_ } _%>
        <%_ if (minikube) { _%>
          value: http://$(MINIKUBE_IP):30001/realms/jhipster
        <%_ } _%>
        - name: SERVICE_REGISTRY_URL
          value: http://admin:$(JHIPSTER_REGISTRY_PASSWORD)@jhipster-registry.<%= kubernetesNamespace %>.svc.cluster.local:8761/eureka/apps/
          ## GO MICRO ##
        - name: GO_MICRO_ACTIVE_PROFILE
          value: prod
        <%_ if (app.prodDatabaseTypePostgres) { _%>
        - name: GO_MICRO_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: <%= app.baseName.toLowerCase() %>-postgresql
              key: postgresql-password
        - name: GO_MICRO_DB_URL
          value: postgresql://<%= app.baseName.toLowerCase() %>:$(GO_MICRO_DB_PASSWORD)@<%= app.baseName.toLowerCase() %>-postgresql.<%= kubernetesNamespace %>.svc.cluster.local:<%= app.databasePort != null ? app.databasePort : 5432 %>/<%= app.baseName.toLowerCase() %>
        <%_ } _%>
        <%_ if (app.databaseTypeMongodb) { _%>
        - name: GO_MICRO_MONGODB_URL
          value: "mongodb://<% for (let i = 0; i < app.dbPeerCount; i++) { %><%= app.baseName.toLowerCase() %>-mongodb-<%= i %>.<%= app.baseName.toLowerCase() %>-mongodb.<%= kubernetesNamespace %>:<%= app.databasePort != null ? app.databasePort : 27017 %><% if (app.reactive) { %>/?waitQueueMultiple=1000<% } %><% if (i < (app.dbPeerCount-1)) { %>,<% }} %>"
        <%_ } _%>
        <%_ if (app.messageBrokerRabbitMQ || app.communicationsFrameworkRabbitMQ) { _%>
        - name: RABBITMQ_GUEST_PASSWORD
          valueFrom:
            secretKeyRef:
              name: rabbitmq-secret
              key: rabbitmq-guest-password
        - name: GO_MICRO_MESSAGE_BROKER
          value: amqp://guest:$(RABBITMQ_GUEST_PASSWORD)@jhipster-rabbitmq.<%= kubernetesNamespace %>.svc.cluster.local:5672
       <%_ } _%>
        <%_ if (useKeycloak) { _%>
        - name: GO_MICRO_KEYCLOAK_URL
        <%_ if (!minikube) { _%>
          value: http://keycloak.<%= kubernetesNamespace %>.<%= ingressDomain %>
        <%_ } _%>
        <%_ if (minikube) { _%>
          value: http://$(MINIKUBE_IP):30001
        <%_ } _%>
      <%_ } _%>  
      <%_ if (externalLB) { _%>
        - name: GO_MICRO_KEYCLOAK_URL
        <%_ if (!minikube) { _%>   
          value: http://$(EXTERNAL_LB):8080/realms/jhipster
        <%_ } _%>
        <%_ if (minikube) { _%>
          value: http://$(MINIKUBE_IP):30001
        <%_ } _%>
      <%_ } _%> 
        - name: GO_MICRO_SERVICE_REGISTRY_URL
          value: http://admin:$(JHIPSTER_REGISTRY_PASSWORD)@jhipster-registry.<%= kubernetesNamespace %>.svc.cluster.local:8761/eureka/apps/
<%_ } _%>
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1"
<%_ if (app.clientFramework === 'react' || app.clientFramework === 'angular' || app.clientFramework === 'vue') { _%>    
        ports:
        - name: http
          containerPort: 80
<%_ } else {_%>
        ports:
        - name: <%= (externalLB && app.applicationTypeGateway) ? app.baseName.toLowerCase() + '-port' : 'http' %>
          containerPort: <%= app.serverPort %>
        readinessProbe:
          httpGet:
            path: /management/health/readiness
            port: <%= (externalLB && app.applicationTypeGateway) ? app.baseName.toLowerCase() + '-port' : 'http' %>
          initialDelaySeconds: 20
          periodSeconds: 15
          failureThreshold: 6
        livenessProbe:
          httpGet:
            path: /management/health/liveness
            port: <%= (externalLB && app.applicationTypeGateway) ? app.baseName.toLowerCase() + '-port' : 'http' %>
          initialDelaySeconds: 120
  <%_ } _%>


